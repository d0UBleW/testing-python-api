#!/usr/bin/env python3

import time
import random
# from typing import Optional
# from fastapi.params import Body
from fastapi import FastAPI, Response, status, HTTPException, Depends
from pydantic import BaseModel
import psycopg2
from psycopg2.extras import RealDictCursor
from sqlalchemy.orm import Session

from . import models
from .database import engine, SessionLocal, get_db

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    # rating: Optional[int] = None

while True:
    try:
        conn = psycopg2.connect(
            host="localhost",
            database="fastapi",
            user="admin",
            password="admin",
            cursor_factory=RealDictCursor
        )
        cursor = conn.cursor()
        print("Established connection to the database")
        break;
    except Exception as error:
        print("Failed to connect to the database")
        print(f"Error: {error}")
        time.sleep(5)


@app.get("/")
def root():
    return {"message": "Hello, World"}


@app.get("/posts")
def get_posts():
    cursor.execute("SELECT * FROM posts")
    posts = cursor.fetchall()
    return {"data": posts}


@app.get("/posts/{id}")
def get_post(id: int, response: Response):
    # response is used to handle http response
    cursor.execute(
        """
        SELECT * FROM posts WHERE id=%s
        """,
        (str(id),)
    )
    post = cursor.fetchone()
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail="Unable to fetch the specified post. id does not exist")
        # response.status_code=status.HTTP_404_NOT_FOUND

    return {"data": post}


@app.post("/posts", status_code=status.HTTP_201_CREATED)
def create_post(post: Post):
    cursor.execute(
        """
        INSERT INTO posts(title, content, published)
        VALUES (%s, %s, %s)
        RETURNING *
        """,
        (
            post.title,
            post.content,
            post.published
        )
    )
    new_post = cursor.fetchone()
    conn.commit()
    return {"data": new_post}


@app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int):
    cursor.execute(
        """
        DELETE FROM posts
        WHERE id=%s
        RETURNING *
        """,
        (str(id),)
    )
    try:
        deleted_post = cursor.fetchone()
        print(deleted_post)
        conn.commit()
    except:
        deleted_post = None
    finally:
        if deleted_post == None:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                                detail="Unable to delete the specified post. id does not exist")

    return {"data": deleted_post}


@app.put("/posts/{id}")
def update_post(id: int, post: Post):
    cursor.execute(
        """
        UPDATE posts
        SET title=%s,
            content=%s,
            published=%s
        WHERE id=%s
        RETURNING *
        """,
        (
            post.title,
            post.content,
            post.published,
            str(id)
        )
    )
    try:
        updated_post = cursor.fetchone()
        conn.commit()
    except:
        updated_post = None
    finally:
        if updated_post == None:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                                detail="Unable to update the specified post. id does not exist")

    return {"data": updated_post}


def find_post(id: int):
    global my_posts
    post = [None]
    post += [p for p in my_posts if p["id"] == id]
    post = post[-1]
    try:
        idx = my_posts.index(post)
    except ValueError:
        idx = None
    return (post, idx)

@app.get("/sqlalchemy")
def test_posts(db: Session = Depends(get_db)):
    return {"status": "success!"}
